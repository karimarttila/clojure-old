
# Our web store url
web-store-url=https://webstore.demo.com

# Customer, select from min and max random uniformally.
customer-id-min=1
customer-id-max=100

# Number of groups
group-count=2
# Group-names:
group-name-1=Books
group-name-2=Movies
# Where the product ids start and end in each group
# Books
group-product-id-min-1=2001
group-product-id-max-1=2100
# Movies
group-product-id-min-2=1
group-product-id-max-2=1000

# Probability of browsing groups (vs products)
# Let's say that customers spend only 10% clicking product groups
# (since once they click it they get a list of products in that product group
# and they are looking at it), so most clicks are clicking certain
# product (90%)
probability-browsing-group=0.1
# Probability to browse certain group, they are mostly interested of
# browsing various movie titles in the movies product group.
probability-browsing-group-1=0.3
probability-browsing-group-2=0.7
# Probability browsing-products. Since they were mostly interested to
# look at movie titles let's assume that most product clicks are
# certain movies.
probability-browsing-products-in-group-1=0.15
probability-browsing-products-in-group-2=0.85

# How many clicks do we generate per second?
clicks-per-second=3

# How often to check server status change (in seconds)?
poll-server-status-change=4

token-as-hash=<PROVIDE-TOKEN-AS-HASH-HERE>

# NOTE: In real system we should query this in AWS adding environment prefix, like dev/qa/perf/prod.
url-kinesis-stream-name=<PROVIDE-YOUR-KINESIS-STREAM-NAME-HERE>